{"version":3,"sources":["reportWebVitals.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","margin","maxWidth","image","width","height","img","display","maxHeight","WorkOrders","React","Component","classes","useState","orders","setOrders","setError","setIsLoaded","useEffect","fetch","res","json","result","error","className","Grid","container","map","item","xs","Paper","name","description","deadline","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAYeA,G,OAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,uFCDRQ,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,OAAQ,OACRC,SAAU,KAEZC,MAAO,CACLC,MAAO,IACPC,OAAQ,KAEVC,IAAK,CACHL,OAAQ,OACRM,QAAS,QACTL,SAAU,OACVM,UAAW,YA2HAC,GA1DSC,IAAMC,UA7DX,WACjB,IAAMC,EAAUnB,IAChB,EAAkBoB,mBAAS,IAA3B,mBACA,GADA,UACwBA,mBAAS,KAAjC,mBAAMC,EAAN,KAAaC,EAAb,KACA,EAAsBF,mBAAS,MAA/B,mBAAYG,GAAZ,WACA,EAAgCH,oBAAS,GAAzC,mBAAiBI,GAAjB,WAyBA,OAxBAC,qBAAU,WAGRC,MAFkB,mDAGjBhC,MAAK,SAAAiC,GAAG,OAAEA,EAAIC,UACdlC,MACC,SAACmC,GACGL,GAAY,GACZF,EAAUO,EAAOR,WAUjB,SAACS,GACIN,GAAY,GACZD,EAASO,QAElB,IAID,qBAAKC,UAAWZ,EAAQhB,KAAxB,SACG,cAAC6B,EAAA,EAAD,CAAMC,WAAS,EAAC1B,QAAS,EAAzB,SACCc,EAAOa,KAAI,SAACb,GAAD,OACX,cAACW,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACC,eAACC,EAAA,EAAD,CAAON,UAAWZ,EAAQd,MAA1B,UACE,eAAC2B,EAAA,EAAD,CAAMC,WAAS,EAAC1B,QAAS,EAAzB,UACE,cAACyB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACGf,EAAOiB,OAEV,cAACN,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACGf,EAAOkB,cAEV,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACGf,EAAOmB,cAGZ,cAACR,EAAA,EAAD,CAAMC,WAAS,EAAC1B,QAAS,QAbLc,EAAOoB,aCvDvCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BvD,M","file":"static/js/main.82ffee38.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { render } from '@testing-library/react';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: 'auto',\n    maxWidth: 500,\n  },\n  image: {\n    width: 128,\n    height: 128,\n  },\n  img: {\n    margin: 'auto',\n    display: 'block',\n    maxWidth: '100%',\n    maxHeight: '100%',\n  },\n}));\n\nconst WorkOrders = ()=> {\n  const classes = useStyles();\n  const[wdata,setW]=useState([]);\n  const[orders,setOrders]=useState([]);\n  const[error,setError]=useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(()=>{\n    const url_order = \"https://api.hatchways.io/assessment/work_orders\";\n    const url_worker='';\n    fetch(url_order)\n    .then(res=>res.json())\n    .then(\n      (result)=>{\n          setIsLoaded(true);\n          setOrders(result.orders);\n         /*  result.orders.map((orders)=>{           \n          fetch(`https://api.hatchways.io/assessment/workers/`+`${orders.workerId}`)\n             .then(res=>res.json())\n             .then(result=>{\n              setIsLoaded(true);\n              setW(result.worker);   \n              console.log(wdata);           \n            },*/\n          },\n          (error)=>{\n               setIsLoaded(true);\n               setError(error);\n            })  \n    },[])\n \n  return(\n    \n     <div className={classes.root}>\n        <Grid container spacing={1}>\n        {orders.map((orders) => \n         <Grid item xs={6} key={orders.id}>\n          <Paper className={classes.paper}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                {orders.name}\n              </Grid>\n              <Grid item xs={12}>\n                {orders.description}\n              </Grid>\n              <Grid item xs={12}>\n                {orders.deadline}\n              </Grid>                         \n            </Grid>      \n            <Grid container spacing={2}>    \n           {/*<WorksData id={orders.WorkerId}/>*/}\n            </Grid>     \n           </Paper>\n         </Grid>\n         )\n      }\n        </Grid>\n     </div>\n  \n\n  );\n}\nclass WorksData extends React.Component{\nconstructor(props){\n  super(props);\n  this.state={workdata:null};\n}\ncomponentDidMount(){\n  fetch(\"https://api.hatchways.io/assessment/workers/1\")\n  .then(res=>res.json())\n  .then(result=>{\n        this.setState({workdata:result.worker});                 \n    },\n   (error)=>{\n   });  \n}\n  /*const[wdata,setW]=useState([]);\n  const[error,setError]=useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(()=>{\n     \n      fetch('https://api.hatchways.io/assessment/workers/'+ props.id)\n      .then(res=>res.json())\n      .then(result=>{\n         setIsLoaded(true);\n           setW(result);   \n           console.log(wdata);           \n        },\n       (error)=>{\n           setIsLoaded(true);\n           setError(error);\n       })   \n  fetch(url_worker)\n           .then(res=>res.json())\n           .then(result=>{\n              setIsLoaded(true);\n                setW(result.worker);   \n                console.log(wdata);           \n             },\n            (error)=>{\n                setIsLoaded(true);\n                setError(error);\n            })\n       },[]);*/\nrender(){\n  const{ workdata}=this.state;\n  return(  \n    <Grid container spacing={2}>\n    \n           {workdata.map(workd=>(\n             <Grid item xs={6} key={workd.id}>\n             {workd.name}\n           </Grid>\n           ))}\n    \n   \n    </Grid>\n  );\n}\n}\nexport default WorkOrders","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport WorkOrders from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <WorkOrders/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}